[
  // ============================================
  // Telescope-like keybindings
  // ============================================
  // find file by file name
  {
    "command": "workbench.action.quickOpen",
    "key": "space f f",
    "when": "neovim.mode != 'insert' && (editorTextFocus || !inputFocus)"
  },
  // find tab by file name
  {
    "command": "workbench.action.showAllEditors",
    "key": "space f t",
    "when": "neovim.mode != 'insert' && (editorTextFocus || !inputFocus)"
  },
  // find file by string
  {
    "command": "workbench.action.findInFiles",
    "key": "space f s",
    "when": "neovim.mode != 'insert' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "list.focusDown",
    "key": "shift+enter",
    "when": "hasSearchResults"
  },
  {
    "command": "workbench.action.quickOpenNavigateNextInFilePicker",
    "key": "ctrl+j",
    "when": "inQuickOpen"
  },
  {
    "command": "workbench.action.quickOpenNavigatePreviousInFilePicker",
    "key": "ctrl+k",
    "when": "inQuickOpen"
  },
  // find string within the current file
  {
    "command": "actions.find",
    "key": "/",
    "when": "neovim.mode != 'insert' && editorTextFocus"
  },
  // find selected string within the current file
  {
    "command": "runCommands",
    "key": "ctrl+/",
    "when": "neovim.mode != 'insert' && editorTextFocus",
    "args": {
      "commands": ["actions.findWithSelection", "actions.find"]
    }
  },
  // ============================================
  //  Tree Explore-like keybindings
  // ============================================
  // toggle tree (file explore)
  {
    "key": "space t t",
    "command": "workbench.action.toggleSidebarVisibility",
    "when": "neovim.mode != 'insert' && (editorTextFocus || !inputFocus)"
  },
  // jump to tree (file explore)
  {
    "key": "space t j",
    "command": "workbench.view.explorer",
    "when": "neovim.mode != 'insert' && (editorTextFocus || !inputFocus)"
  },
  // select next item in tree (file explore)
  {
    "command": "list.focusDown",
    "key": "j",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // select previous item in tree (file explore)
  {
    "command": "list.focusUp",
    "key": "k",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // toggle folder or select file in tree (file explore) list.
  {
    "command": "list.selectAndPreserveFocus",
    "key": "f",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // open file in a new created editor group when there is only one editor group.
  {
    "command": "runCommands",
    "key": "g",
    "when": "filesExplorerFocus && !inputFocus && !multipleEditorGroups",
    "args": {
      "commands": [
        "explorer.openAndPassFocus",
        "workbench.action.moveEditorToRightGroup"
      ]
    }
  },
  // open file in the current editor group when there are multiple editor groups.
  {
    "command": "explorer.openAndPassFocus",
    "key": "g",
    "when": "filesExplorerFocus && !inputFocus && multipleEditorGroups"
  },
  // rename file in tree (file explore) list.
  {
    "command": "renameFile",
    "key": "r",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // copy file in tree (file explore) list.
  {
    "command": "filesExplorer.copy",
    "key": "c",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // paste file in tree (file explore) list.
  {
    "command": "filesExplorer.paste",
    "key": "v",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // cut file in tree (file explore) list.
  {
    "command": "filesExplorer.cut",
    "key": "x",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // delete file in tree (file explore) list.
  {
    "command": "deleteFile",
    "key": "d",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // create new file in tree (file explore) list.
  {
    "command": "explorer.newFile",
    "key": "a",
    "when": "filesExplorerFocus && !inputFocus"
  },
  // create new folder in tree (file explore) list.
  {
    "command": "explorer.newFolder",
    "key": "shift+a",
    "when": "filesExplorerFocus && !inputFocus"
  },
  //
  // ============================================
  //  Navigation keybindings
  // ============================================
  {
    "command": "workbench.action.navigateLeft",
    "key": "ctrl+h",
    "when": "neovim.mode !== 'insert' && !editorHoverFocused && !inQuickOpen"
  },
  {
    "command": "workbench.action.navigateRight",
    "key": "ctrl+l",
    "when": "neovim.mode !== 'insert' && !editorHoverFocused && !inQuickOpen"
  },
  {
    "command": "workbench.action.navigateUp",
    "key": "ctrl+k",
    "when": "neovim.mode !== 'insert' && !editorHoverFocused && !inQuickOpen"
  },
  {
    "command": "workbench.action.navigateDown",
    "key": "ctrl+j",
    "when": "neovim.mode !== 'insert' && !editorHoverFocused && !inQuickOpen"
  },
  // ============================================
  // folding keybindings
  // ============================================
  // tiggle fold
  {
    "key": "ctrl+f ctrl+f",
    "command": "editor.toggleFold",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // fold all
  {
    "key": "ctrl+a ctrl+a",
    "command": "editor.foldAll",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // unfold all
  {
    "key": "ctrl+u ctrl+u",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // ============================================
  // Resizing keybindings
  // ============================================
  //
  // {
  //   "key": "ctrl+w",
  //   "command": "workbench.action.increaseViewWidth",
  //   "when": "editorTextFocus && neovim.mode == 'normal'"
  // },
  {
    "key": "ctrl+shift+w",
    "command": "workbench.action.decreaseViewWidth",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // {
  //   "key": "ctrl+h",
  //   "command": "workbench.action.increaseViewHeight",
  //   "when": "editorTextFocus && neovim.mode == 'normal'"
  // },
  {
    "key": "ctrl+shift+h",
    "command": "workbench.action.decreaseViewHeight",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  // ============================================
  // Editor keybindings
  // ============================================
  {
    "command": "vscode-neovim.send",
    "key": "",
    "when": "editorTextFocus && neovim.mode == 'normal'",
    "args": "<Esc>gj",
    "override": true
  },
  {
    "command": "vscode-neovim.send",
    "key": "",
    "when": "editorTextFocus && neovim.mode == 'normal'",
    "args": "<Esc>gk",
    "override": true
  },
  {
    "command": "editor.action.moveLinesDownAction",
    "key": "alt+j",
    "when": "neovim.mode !== 'insert' && editorTextFocus"
  },
  {
    "command": "editor.action.moveLinesUpAction",
    "key": "alt+k",
    "when": "neovim.mode !== 'insert' && editorTextFocus"
  },
  {
    "key": "space m r",
    "command": "workbench.action.moveEditorToRightGroup",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  {
    "key": "space m d",
    "command": "workbench.action.moveEditorToBelowGroup",
    "when": "editorTextFocus && neovim.mode == 'normal'"
  },
  {
    "command": "editor.action.showHover",
    "key": "space c h",
    "when": "neovim.mode == 'normal' && editorTextFocus",
    "args": {
      "focus": true
    }
  },
  {
    "key": "ctrl+j",
    "command": "editor.action.scrollDownHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "ctrl+k",
    "command": "editor.action.scrollUpHover",
    "when": "editorHoverFocused"
  },
  {
    "key": "v",
    "command": "list.selectAndPreserveFocus",
    "when": "referenceSearchVisible && listFocus"
  },
  {
    "key": "ctrl+j",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible && neovim.mode == 'insert'"
  },
  {
    "key": "ctrl+k",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetVisible && neovim.mode == 'insert'"
  },
  {
    "command": "workbench.action.nextEditorInGroup",
    "key": "tab",
    "when": "(neovim.mode == 'normal' || neovim.mode == 'visual') && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "workbench.action.previousEditorInGroup",
    "key": "shift+tab",
    "when": "(neovim.mode == 'normal' || neovim.mode == 'visual') && (editorTextFocus || !inputFocus)"
  },

  {
    "command": "editor.action.codeAction",
    "key": "space c a",
    "when": "neovim.mode == 'normal' && editorTextFocus"
  },
  {
    "command": "editor.action.rename",
    "key": "space c r",
    "when": "neovim.mode == 'normal' && editorTextFocus"
  },

  {
    "command": "editor.action.revealDefinition",
    "key": "space g d",
    "when": "neovim.mode == 'normal' && editorTextFocus"
  },
  {
    "command": "editor.action.goToReferences",
    "key": "space g r",
    "when": "neovim.mode == 'normal' && editorTextFocus"
  },
  {
    "command": "workbench.action.findInFiles",
    "key": "space g s",
    "when": "neovim.mode == 'normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "editor.action.addSelectionToNextFindMatch",
    "key": "ctrl+n",
    "when": "(neovim.mode == 'normal' || neovim.mode == 'visual') && (editorTextFocus || !inputFocus)"
  },
  {
    "args": {
      "commands": [
        "workbench.action.splitEditorDown",
        "explorer.openAndPassFocus",
        "workbench.action.closeOtherEditors"
      ]
    },
    "command": "runCommands",
    "key": "shift+s",
    "when": "filesExplorerFocus && foldersViewVisible && !explorerResourceIsRoot && !explorerResourceReadonly && !inputFocus"
  },
  {
    "args": {
      "commands": ["workbench.view.scm"]
    },
    "command": "runCommands",
    "key": "space g g",
    "when": "neovim.mode == 'normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "command": "git.openFile",
    "key": "enter",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "args": {
      "commands": ["list.focusFirst", "list.select"]
    },
    "command": "runCommands",
    "key": "i",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "key": "enter",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && inputFocus",
    "args": {
      "commands": ["git.commit"]
    }
  },
  {
    "key": "cmd+enter",
    "command": "runCommands",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && inputFocus",
    "args": {
      "commands": ["git.push"]
    }
  },
  {
    "args": {
      "commands": ["list.focusDown"]
    },
    "command": "runCommands",
    "key": "escape",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && inputFocus"
  },
  {
    "args": {
      "commands": [
        "git.stage",
        "list.focusAnyUp",
        "list.selectAndPreserveFocus"
      ]
    },
    "command": "runCommands",
    "key": "s",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "args": {
      "commands": [
        "git.unstage",
        "list.focusAnyUp",
        "list.selectAndPreserveFocus"
      ]
    },
    "command": "runCommands",
    "key": "shift+s",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "command": "git.stageAll",
    "key": "e",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "command": "git.unstageAll",
    "key": "shift+e",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.scm' && !inputFocus"
  },
  {
    "args": {
      "commands": ["workbench.view.extensions"]
    },
    "command": "runCommands",
    "key": "space g e",
    "when": "neovim.mode == 'normal' && (editorTextFocus || !inputFocus)"
  },
  {
    "args": {
      "commands": ["workbench.extensions.search"]
    },
    "command": "runCommands",
    "key": "i",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions' && !inputFocus"
  },
  {
    "args": {
      "commands": ["workbench.extensions.installExtension"]
    },
    "command": "runCommands",
    "key": "enter",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions' && !inputFocus"
  },
  {
    "args": {
      "commands": ["list.focusDown"]
    },
    "command": "runCommands",
    "key": "escape",
    "when": "sideBarFocus && activeViewlet == 'workbench.view.extensions' && inputFocus"
  },
  {
    "command": "editor.action.triggerSuggest",
    "key": "cmd+i",
    "when": "editorFocus && editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "command": "-editor.action.triggerSuggest",
    "key": "cmd+i",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
  },
  {
    "command": "-inlineChat.startWithCurrentLine",
    "key": "cmd+i",
    "when": "editorFocus && github.copilot.chat.editor.enableLineTrigger && inlineChatHasProvider && !editorReadonly && !inlineChatVisible"
  },
  {
    "command": "-actions.findWithSelection",
    "key": "cmd+e"
  }
]
